Práctica 1
1.1.
Estudiar documentacion OK
Crear archivo legible OK
Cifrar con 5 algoritmos OK
Descifrarlos y comprobar el resultado OK
Explicar el tamano de los ficheros cifrados.
En cuanto a los algoritmos con cifradores en bloque, podemos observar lo siguiente:
Evitamos, en primer lugar, que el fichero esté codificado en base64, para evitar que nos incluya bytes de más, para quedarnos puramente con el efecto del fichero tras ser cifrado. Este tamaño pasa de 265 bytes de fichero original a 288 de fichero cifrado. Si eliminamos la sal, restamos 16 bytes, obteniendo así 272 bytes. Aun no hemos logrado justificar el tamaño, pero sabiendo que el cifrador cbc usa bloques de 16 bytes y en caso de que el tamaño no sea multiplo de 16, añade caracteres nulos al final. Por ello, si hacemos la diferencia de 16 y el modulo de 265, obtenemos ue nos falta 7 bytes. 265 + 7 bytes dan 272, más la sal de 16, 288 bytes.

En lo que respecta al cifrador en flujo, al no usar bloques sino cifrar todo el conjunto, al restar la sal de el fichero en binario (sin base64), obtenemos el tamaño del fichero origianl. 281-16=265.

Explicar la gestion de contrasenas:
El estandar PKCS #5 viene recogido en la RFC 2898. Segun RSA Security, operacinnn de cifrado en su version v1.5, no siendo demasiado distinta en su version 2.0, se basa en generar una sal aleatoria , crear un hash con la contrasena para crear la clave (a traves de la sal) el vector de inializacion, rellenar el mensaje y cifrar. El descifrado sufre un proceso similar, en sentido contrario como era de esperar. Cabe destacar, a modo de interes, que los cambios entre la version 1.5 y 2.0 son el algoritmo de para hacer el hash, siendo este sha1 y para cifrar, ciento este rc2 en lugar de des, ambos utilizando cbc como cifrador de bloques, por ello la necesidad del vector de inicializacion.
https://security.stackexchange.com/questions/6058/is-real-salt-the-same-as-initialization-vectors

https://es.wikipedia.org/wiki/Modos_de_operaci%C3%B3n_de_una_unidad_de_cifrado_por_bloques

